<?php

/**
 * @fiel commerce_dapi_orders.module
 */

//Definisco il valore dell'iva
define('IVA_ITA', 1.22);

/**
 * Implements hook_menu().
 */
function commerce_dapi_orders_menu() {
  $items = array();

  $items['admin/commerce/orders/%commerce_order/dapi'] = array(
    'title' => 'Diapason ERP',
    'page callback' => 'commerce_dapi_orders_arguments',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('interact with diapason erp'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 8,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE
  );

  $items['admin/commerce/orders/%commerce_order/dapi/sendsubjectdata'] = array(
    'title' => 'Send Subject Data to Diapason ERP',
    'page callback' => 'commerce_dapi_orders_create_subject',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('interact with diapason erp'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/commerce/orders/%commerce_order/dapi/sendorderdata/%'] = array(
    'title' => 'Send Order Data to Diapason ERP',
    'page callback' => 'commerce_dapi_orders_create_order',
    'page arguments' => array(3, 6),
    'access callback' => 'user_access',
    'access arguments' => array('interact with diapason erp'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/services/commerce-dapi-orders'] = array(
    'title' => 'DAPI Order Framework Configuration',
    'description' => 'Configure a location to make calls.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_dapi_orders_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('interact with diapason erp'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 *
 * Defines a new permission called 'Interact with Diapason ERP'.
 */
function commerce_dapi_orders_permission() {
  return array(
    'interact with diapason erp' => array(
      'title' => t('Interact with Diapason ERP'),
      'description' => t('Allows users to perform task in Diapason ERP.'),
    ),
  );
}

/**
 * Administration form for commerce_dapi_orders module
 */
function commerce_dapi_orders_admin_settings($form, &$form_state) {

  $form['location'] = array(
    '#type' => 'fieldset',
    '#title' => t('Location'),
    '#description' => t('Enter the location of the server.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['location']['commerce_dapi_orders_hostname'] = array(
    // TODO: change to URL field
    '#type' => 'textfield',
    '#title' => t('Hostname'),
    '#description' => t('The hostname for the server with no trailing slash. Ex: http://localhost:80/rest'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => isset($form_state['values']['commerce_dapi_orders_hostname']) ? $form_state['values']['commerce_dapi_orders_hostname'] : variable_get('commerce_dapi_orders_hostname', 'http://localhost'),
    // TODO: add attributes to store pattern to check in browser
  );

  $form['#validate'][] = 'commerce_dapi_orders_admin_settings_validate';

  return system_settings_form($form);
}

/**
 * Validation callback
 */
function commerce_dapi_orders_admin_settings_validate($form, &$form_state) {
  $values = $form_state['values'];

  // Check for hostname
  // TODO: change to valid_url function
  if (!filter_var($values['commerce_dapi_orders_hostname'], FILTER_VALIDATE_URL, FILTER_FLAG_SCHEME_REQUIRED)) {
    form_set_error('commerce_dapi_orders_hostname', t('Invalid URL'));
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Add some javascript to template
 */
function commerce_dapi_orders_preprocess_page(&$vars) {

  $path = current_path();

  if (path_is_admin($path) && strpos($path, 'dapi') !== FALSE) {
    drupal_add_css(drupal_get_path('module', 'commerce_dapi_orders') . '/css/buttonize3.min.css', array(
      'group' => CSS_DEFAULT,
      'every_page' => TRUE
    ));
    drupal_add_js('(function($, Drupal) {

	Drupal.behaviors.commerce_dapi_orders = {};
	Drupal.behaviors.commerce_dapi_orders.attach = function(context, settings) {

	$( "a.buttonize" ).click(function() {
	  $("a.buttonize").each(function() {
		   $(this).toggle();
		});
	});
};
})(jQuery, Drupal);', array(
      'type' => 'inline',
      'scope' => 'footer',
      'weight' => 5
    ));
  }

}

/**
 * This callback is mapped to the path 'admin/commerce/orders/%commerce_order/dapi'.
 * This function render array table in the returned
 * values with subject in Diapason.
 */
function commerce_dapi_orders_arguments($commerce_order) {

  // Load restclient functions.
  module_load_include('inc', 'commerce_dapi_orders', 'include/commerce_dapi_orders.restclient_functions');

  // Check status order isn't 'completed'.
  if ($commerce_order->status == 'completed') {
    drupal_set_message(t('Order @order_id already completed: it is not possible to perform operations.', array('@order_id' => $commerce_order->order_id)));
    drupal_goto('admin/commerce/orders');
  }

  $wrapper_order = entity_metadata_wrapper('commerce_order', $commerce_order);
  $billing_typology = $wrapper_order->commerce_customer_billing->field_tipologia_fatturazione->value();
  $billingID = $wrapper_order->commerce_customer_billing->field_codice_fiscale->value();

  if ($billing_typology == "private") {
    $firmName = $wrapper_order->commerce_customer_billing->commerce_customer_address->last_name->value() . " " . $wrapper_order->commerce_customer_billing->commerce_customer_address->first_name->value();
  }
  else {
    $firmName = $wrapper_order->commerce_customer_billing->commerce_customer_address->organisation_name->value();
  }

  // Create array for request post.
  $data = array(
    'firmName' => $firmName,
    'vatID' => $billingID,
    'taxpayerID' => $billingID,
    'email' => $commerce_order->mail,
  );

  // Search customers in Diapason.
  $response = commerce_dapi_orders_search_subject($data);

  // Variables for data retrieve from WebServices.
  $response_data_search = array();

  // Check response
  if ($response->code == '200') {

    // Convert xml to array
    try {
      $p = xml_parser_create();
      $vals = array();
      xml_parser_set_option($p, XML_OPTION_CASE_FOLDING, 0);
      xml_parser_set_option($p, XML_OPTION_SKIP_WHITE, 1);
      xml_parse_into_struct($p, $response->data, $vals, $index);
      xml_parser_free($p);

      // Loop through the structures.
      foreach ($index as $key => $val) {

        if ($key == "Subject") {
          $subject_ranges = $val;

          // Each contiguous pair of array entries are the
          // lower and upper range for each subject definition
          for ($i = 0; $i < count($subject_ranges); $i += 2) {

            $offset = $subject_ranges[$i] + 1;
            $len = $subject_ranges[$i + 1] - $offset;

            // Retrieve values from $vals.
            $subject_values = array_slice($vals, $offset, $len);
            $subject_array = array();
            for ($t = 0; $t < count($subject_values); $t++) {
              $subject_array[$subject_values[$t]["tag"]] = isset($subject_values[$t]["value"]) ? $subject_values[$t]["value"] : '';
            }

            $response_data_search[] = $subject_array;
          }
        }
        else {
          continue;
        }
      }
    }
    catch (Exception $e) {
      watchdog('commerce_dapi_orders', 'Data recovery Error: @data', array('@data' => $response->data), WATCHDOG_ERROR);
      drupal_set_message(t('Data recovery Error. Please contact technical support.'), 'warning', TRUE);
      $response_data_search = array();
    }
  }
  else {
    // Log message error.
    watchdog('commerce_dapi_orders', t('Error in request to get search subject: @firmName - @email'), array(
      '@firmName' => $firmName,
      '@email' => $commerce_order->mail,
    ), WATCHDOG_ERROR);
    drupal_set_message(t('Error in request to get search subject. Please contact technical support.'), 'warning', TRUE);
    $response_data_search = array();
  }

  // Column request for table data.
  $column_value_request = array(
    'CODICE-SOGGETTO' => t('Subject Code'),
    'DESCR-CODICE-SOGGETTO' => t('Denomination'),
    'VIA' => t('Street'),
    'CITTA' => t('City'),
    'DESCR-PROVINCIA' => t('Province'),
    'N-TELEF' => t('Phone'),
    'CODICE-FISCALE' => t('CF'),
    'PARTITA-IVA' => t('P.IVA'),
  );

  // Header table.
  $header = array_values($column_value_request);
  $header = array_merge($header, array(t('Operations')));

  // Rows table.
  $rows = array();

  foreach ($response_data_search AS $subject) {

    // Check exist subjectID.
    if (!isset($subject['subjectID']) || empty($subject['subjectID'])) {
      continue;
    }

    // Retrieve subject in Diapason
    $response = commerce_dapi_orders_retrieve_subject($subject['subjectID']);

    $response_data_retrieve_client = array();

    // Check response
    if ($response->code == '200') {

      // Convert xml to array
      try {
        $p = xml_parser_create();
        $vals = array();
        xml_parse_into_struct($p, $response->data, $vals, $index);
        xml_parser_free($p);

        foreach ($vals as $value) {

          // Exclude wrapper xml.
          if ($value['level'] == 4) {
            $response_data_retrieve_client[$value['tag']] = trim($value['value']);
          }
        }

      }
      catch (Exception $e) {
        watchdog('commerce_dapi_orders', 'Data recovery Error: @data', array('@data' => $response->data), WATCHDOG_ERROR);
        drupal_set_message(t('Data recovery Error. Please contact technical support.'), 'warning', TRUE);
        $response_data_retrieve_client = array();
      }
    }
    else {
      // Log message error.
      watchdog('commerce_dapi_orders', t('Error in request to get retrieve subject @subjectID'), array(
        '@subjectID' => $subject['subjectID'],
      ), WATCHDOG_ERROR);
      drupal_set_message(
        t('Error in request to get retrieve subject @subjectID. Please contact technical support.',
          array(
            '@subjectID' => $subject['subjectID'],
          )
        ), 'warning', TRUE);
      $response_data_retrieve_client = array();
    }

    // Create row array.
    $row = array();

    // Populate row array.
    foreach ($column_value_request as $column_key => $column_label) {
      $row[] = isset($response_data_retrieve_client[$column_key]) ? $response_data_retrieve_client[$column_key] : 'Not found.';
    }

    // Add link to import order in Diapason!
    $row[] = l(t('Importa Ordine in Diapason'), 'admin/commerce/orders/' . $commerce_order->order_id . '/dapi/sendorderdata/' . $response_data_retrieve_client["CODICE-SOGGETTO"], array(
        'attributes' => array('class' => array('buttonize', 'green')),
        'html' => TRUE
      )
    );

    // Save row in rows.
    $rows[] = array('data' => $row);
  }

  $build['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No customer found in Diapason ERP according to the provided criteria.'),
  );
  $build['add_subject'] = array(
    '#theme' => 'link',
    '#text' => t('Create a new subject in Diapason'),
    '#path' => 'admin/commerce/orders/' . $commerce_order->order_id . '/dapi/sendsubjectdata',
    '#options' => array(
      'attributes' => array(
        'onclick' => 'return confirm(\'Please: double check if customer already exists!\');',
        'class' => array('blue', 'buttonize', 'arrow-right')
      ),
      'html' => TRUE,
    ),
  );

  return $build;
}

/**
 * This callback gets the order data from Drupal Commerce
 * and build up the xml that will be sent to ERP
 *
 * @param $commerce_order
 * @param $subject_id
 */
function commerce_dapi_orders_create_order($commerce_order, $subject_id) {

  // Load restclient functions.
  module_load_include('inc', 'commerce_dapi_orders', 'include/commerce_dapi_orders.restclient_functions');
  // Load custom functions.
  module_load_include('inc', 'commerce_dapi_orders', 'include/commerce_dapi_orders.custom_functions');

  $order_wrapper = entity_metadata_wrapper('commerce_order', $commerce_order);

  // Account holder (intestatario).
  $intestario = $subject_id;

  // Recipient (destinatario).
  $destinatario = $subject_id;

  // Commissions (PROVVIGIONI).
  $id_agente = "";
  $cat_prov_agente = "";

  // Address.
  $indirizzodestinatario = NULL;

  // Retrieve subject in Diapason.
  $response = commerce_dapi_orders_retrieve_subject_addresses($subject_id);

  // Init empty variable.
  $response_data_address = array();

  // Check response.
  if ($response->code == '200') {

    // Convert xml to array
    try {
      $p = xml_parser_create();
      $vals = array();
      xml_parser_set_option($p, XML_OPTION_CASE_FOLDING, 0);
      xml_parser_set_option($p, XML_OPTION_SKIP_WHITE, 1);
      xml_parse_into_struct($p, $response->data, $vals, $index);
      xml_parser_free($p);

      // Loop through the structures.
      foreach ($index as $key => $val) {

        if ($key == "GFITEMS") {
          $subject_ranges = $val;

          // Each contiguous pair of array entries are the
          // lower and upper range for each subject definition
          for ($i = 0; $i < count($subject_ranges); $i += 2) {

            $offset = $subject_ranges[$i] + 1;
            $len = $subject_ranges[$i + 1] - $offset;

            // Retrieve values from $vals.
            $subject_values = array_slice($vals, $offset, $len);
            $subject_array = array();
            for ($t = 0; $t < count($subject_values); $t++) {
              $subject_array[$subject_values[$t]["tag"]] = isset($subject_values[$t]["value"]) ? $subject_values[$t]["value"] : '';
            }

            $response_data_address[] = $subject_array;
          }
        }
        else {
          continue;
        }
      }
    } catch (Exception $e) {
      watchdog('commerce_dapi_orders', 'Data recovery Address Error: @data', array('@data' => $response->data), WATCHDOG_ERROR);
      drupal_set_message(t('Data recovery Address Error. Please contact technical support.'), 'warning', TRUE);
      drupal_goto('admin/commerce/orders/' . $commerce_order->order_id . '/dapi');
    }
  }
  else {
    // Log message error.
    watchdog('commerce_dapi_orders', t('Error in request to get retrieve address for subject @subjectID'), array(
      '@subjectID' => $subject_id,
    ), WATCHDOG_ERROR);
    drupal_set_message(
      t('Error in request to get retrieve address for subject @subjectID. Please contact technical support.',
        array(
          '@subjectID' => $subject_id,
        )
      ), 'warning', TRUE);
    drupal_goto('admin/commerce/orders/' . $commerce_order->order_id . '/dapi');
  }

  // If address is one, select this.
  if (count($response_data_address) == 1) {
    $indirizzodestinatario = $response_data_address[0];

  }
  elseif (count($response_data_address) > 1) {

    // If address is more one, search correspondence in array address with data shipping address insert.
    $indirizzodestinatario = NULL;

    foreach ($response_data_address as $key => $response_data_add) {
      $indirizzo = $response_data_add['INDIRIZZI-SOGGETTI'];

      if (@preg_match('/' . strtoupper($order_wrapper->commerce_customer_shipping->commerce_customer_address->thoroughfare->value()) . '/', $indirizzo['VIA'])
        && @preg_match('/' . strtoupper($order_wrapper->commerce_customer_shipping->commerce_customer_address->locality->value()) . '/', $indirizzo['CITTA'])
        && @preg_match('/' . strtoupper($order_wrapper->commerce_customer_shipping->commerce_customer_address->administrative_area->value()) . '/', $indirizzo['DESCR-PROVINCIA'])
      ) {
        $indirizzodestinatario['SEDE'] = $response_data_add;
      }

    }
  }

  // Destination.
  $indirizzo_destinatario = isset($indirizzodestinatario) ? $indirizzodestinatario['SEDE'] : 'A';

  // Customer reference (rif cliente)
  $rif_cliente = date('y') . 'WEB' . $commerce_order->order_id;

  // --- data riferimento cliente --- (data creazione)
  //GGMMAA
  $data_riferimento_cliente = date('dmy', $commerce_order->created);

  // --- data richiesta consegna ---
  //GGMMAA
  $data_richiesta_consegna = _commerce_dapi_orders_find_delivery_date_for_individual();

  // Prepare xml object
  $xml_object = new SimpleXMLElement('<Inputs/>');
  $API = $xml_object->addChild('API');
  $Input = $API->addChild('Input');
  $GFDOrdCliTesAdd = $Input->addChild('GFDOrdCliTesAdd');
  $GFITEMS = $GFDOrdCliTesAdd->addChild('GFITEMS');

  $DATI_TESTATA_DORDINE = $GFITEMS->addChild('DATI-TESTATA-DORDINE');

  // Testata ordine
  $DATI_TESTATA_DORDINE->addChild('DIVISIONE-COMMERCIALE', '02');
  $DATI_TESTATA_DORDINE->addChild('CAUSALE', 'V');
  $DATI_TESTATA_DORDINE->addChild('TIPO-ORD');
  $DATI_TESTATA_DORDINE->addChild('MARCHIO');
  $DATI_TESTATA_DORDINE->addChild('GIRO', 'DSP');
  $DATI_TESTATA_DORDINE->addChild('EVASIONE-PARZIALE');
  $DATI_TESTATA_DORDINE->addChild('ORDINE-AGGREGABILE');
  $DATI_TESTATA_DORDINE->addChild('INTESTATARIO', $intestario);
  $DATI_TESTATA_DORDINE->addChild('IND-INTESTATARIO');
  $DATI_TESTATA_DORDINE->addChild('DESTINATARIO', $destinatario);
  $DATI_TESTATA_DORDINE->addChild('IND-DESTINATARIO', $indirizzo_destinatario);
  $DATI_TESTATA_DORDINE->addChild('RIF-CLIENTE', $rif_cliente);
  $DATI_TESTATA_DORDINE->addChild('DATA-RIFERIMENTO-CLIENTE', $data_riferimento_cliente);
  $DATI_TESTATA_DORDINE->addChild('TRASPORTO-GG');
  $DATI_TESTATA_DORDINE->addChild('DATA-RICHIESTA-CONSEGNA', $data_richiesta_consegna);
  $DATI_TESTATA_DORDINE->addChild('TASS');
  $DATI_TESTATA_DORDINE->addChild('LINGUA');
  $DATI_TESTATA_DORDINE->addChild('PRIOR');
  $DATI_TESTATA_DORDINE->addChild('DATA-RICHIESTA-SPEDIZIONE');
  $DATI_TESTATA_DORDINE->addChild('COMMESSA');
  $DATI_TESTATA_DORDINE->addChild('DATA-RICERCA-LISTINI');
  $DATI_TESTATA_DORDINE->addChild('COMMESSA-CONTABILE');
  $DATI_TESTATA_DORDINE->addChild('MAGAZZINO-SPEDIZIONE');
  $DATI_TESTATA_DORDINE->addChild('FAMIGLIA-COMM');
  $DATI_TESTATA_DORDINE->addChild('ESENZIONE-IVA');
  $DATI_TESTATA_DORDINE->addChild('AGENTE', $id_agente);
  $DATI_TESTATA_DORDINE->addChild('CAT-PROV-1', $cat_prov_agente);
  $DATI_TESTATA_DORDINE->addChild('ORDINE-1');
  $DATI_TESTATA_DORDINE->addChild('AGENTE2');
  $DATI_TESTATA_DORDINE->addChild('CAT-PROV-2');
  $DATI_TESTATA_DORDINE->addChild('ORDINE-2');
  $DATI_TESTATA_DORDINE->addChild('VERIFICA-FIDO');
  $DATI_TESTATA_DORDINE->addChild('STATO-ORDINE');
  $DATI_TESTATA_DORDINE->addChild('RESPONSABILE');
  $DATI_TESTATA_DORDINE->addChild('DATA-CONFERMA-ORDINE');

  // <SetVar name="N-ORDINE" value="NUMERO-ORDINE" />
  $SetVar = $API->addChild('SetVar');
  $SetVar->addAttribute('name', 'N-ORDINE');
  $SetVar->addAttribute('value', 'NUMERO-ORDINE');

  // Righe d'ordine
  $API_ITEM = $xml_object->addChild('API');
  $Input_ITEM = $API_ITEM->addChild('Input');
  $GFDOrdCliRigAdd_ITEM = $Input_ITEM->addChild('GFDOrdCliRigAdd');
  $GFITEMS_ITEM = $GFDOrdCliRigAdd_ITEM->addChild('GFITEMS');

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item) {

    if (isset($line_item->commerce_product)) {

      // Retrive product and product type.
      $product = $line_item->commerce_product;
      $product_type = $product->type->value();

      // Normal product.
      if ($product_type == "product") {

        // Base data.
        $articolo = $line_item->line_item_label->value(); //SKU
        $q_venduta = number_format($line_item->quantity->value(), 0, $dec_point = ",", $thousands_sep = ""); //quantita

        $data_component_price = $line_item->commerce_unit_price->value();

        // Check if price is discounted
        $force_price = '';
        $base_price = '';

        foreach ($data_component_price['data']['components'] as $component) {
          if ($component['name'] == 'base_price') {
            // Format price
            $no_vat_price = ($component['price']['amount'] / IVA_ITA);
            $price = commerce_currency_amount_to_decimal($no_vat_price, $component['price']['currency_code']);
            $base_price = number_format($price, 2, ',', '');
          }
          if (isset($component['price']['data']['discount_name'])) {
            $force_price = 'F';
          }
        }

        // Reset base_price if not discounted
        if ($force_price == '') {
          $base_price = '';
        }

        if ($articolo != "" && $q_venduta != "") {
          $RIGHE_DORDINE_E_OFFERTA = $GFITEMS_ITEM->addChild('RIGHE-DORDINE-E-OFFERTA');
          $RIGHE_DORDINE_E_OFFERTA->addChild('NUMERO-ORDINE');
          $RIGHE_DORDINE_E_OFFERTA->addChild('ARTICOLO1', $articolo);
          $RIGHE_DORDINE_E_OFFERTA->addChild('SPECIFICA1');
          $RIGHE_DORDINE_E_OFFERTA->addChild('UM1');
          $RIGHE_DORDINE_E_OFFERTA->addChild('QTA-VENDUTA1', $q_venduta);
          $RIGHE_DORDINE_E_OFFERTA->addChild('SCONTO11');
          $RIGHE_DORDINE_E_OFFERTA->addChild('SCONTO21');
          $RIGHE_DORDINE_E_OFFERTA->addChild('DATA-RIC1');
          $RIGHE_DORDINE_E_OFFERTA->addChild('DESCR-ARTICOLO1');
          $RIGHE_DORDINE_E_OFFERTA->addChild('SPECIF-CAMPAG1');
          $RIGHE_DORDINE_E_OFFERTA->addChild('SEQ-CAMPAG1');
          $RIGHE_DORDINE_E_OFFERTA->addChild('STATO-RIGA1');
          $RIGHE_DORDINE_E_OFFERTA->addChild('SCONTO-MERCE1');
          $RIGHE_DORDINE_E_OFFERTA->addChild('FORZATURA1', $force_price);
          $RIGHE_DORDINE_E_OFFERTA->addChild('PREZZO-UNITARIO1', $base_price);
          $RIGHE_DORDINE_E_OFFERTA->addChild('CAUSALE1');
        }
      }

      // Bundle Product.
      if ($product_type == "product_bundle") {

        $field_product_bundle_items = $product->field_product_bundle_item;

        foreach ($field_product_bundle_items as $bundle_item) {

          $bundle_item_price = $bundle_item->field_pbi_price_product->value();
          $price = commerce_currency_amount_to_decimal($bundle_item_price['amount'], $bundle_item_price['currency_code']);
          $bundle_item_price = number_format($price, 2, ',', '');
          $bundle_item_product = $bundle_item->field_pbi_reference_product;
          $bundle_item_product_sku = $bundle_item_product->sku->value();

          // Build row xml "RIGHE-DORDINE-E-OFFERTA"
          if (isset($bundle_item_product_sku) && isset($bundle_item_price)) {
            $RIGHE_DORDINE_E_OFFERTA = $GFITEMS_ITEM->addChild('RIGHE-DORDINE-E-OFFERTA');
            $RIGHE_DORDINE_E_OFFERTA->addChild('NUMERO-ORDINE');
            $RIGHE_DORDINE_E_OFFERTA->addChild('ARTICOLO1', $bundle_item_product_sku);
            $RIGHE_DORDINE_E_OFFERTA->addChild('SPECIFICA1');
            $RIGHE_DORDINE_E_OFFERTA->addChild('UM1');
            $RIGHE_DORDINE_E_OFFERTA->addChild('QTA-VENDUTA1', "F");
            $RIGHE_DORDINE_E_OFFERTA->addChild('SCONTO11');
            $RIGHE_DORDINE_E_OFFERTA->addChild('SCONTO21');
            $RIGHE_DORDINE_E_OFFERTA->addChild('DATA-RIC1');
            $RIGHE_DORDINE_E_OFFERTA->addChild('DESCR-ARTICOLO1');
            $RIGHE_DORDINE_E_OFFERTA->addChild('SPECIF-CAMPAG1');
            $RIGHE_DORDINE_E_OFFERTA->addChild('SEQ-CAMPAG1');
            $RIGHE_DORDINE_E_OFFERTA->addChild('STATO-RIGA1');
            $RIGHE_DORDINE_E_OFFERTA->addChild('SCONTO-MERCE1');
            $RIGHE_DORDINE_E_OFFERTA->addChild('FORZATURA1', "F");
            $RIGHE_DORDINE_E_OFFERTA->addChild('PREZZO-UNITARIO1', $bundle_item_price);
            $RIGHE_DORDINE_E_OFFERTA->addChild('CAUSALE1');
          }
        }
      }
    }
  }

  //<PutValue trx="RIGHE-DORDINE-E-OFFERTA" field="NUMERO-ORDINE" value="N-ORDINE" />
  $PutValue = $API_ITEM->addChild('PutValue');
  $PutValue->addAttribute('trx', 'RIGHE-DORDINE-E-OFFERTA');
  $PutValue->addAttribute('field', 'NUMERO-ORDINE');
  $PutValue->addAttribute('value', 'N-ORDINE');

  // Convert to text.
  $xml = $xml_object->asXML();
  $xml = str_replace("<?xml version=\"1.0\"?>\n", '', $xml);

  // Send order
  $risposta = commerce_dapi_orders_insert_order($xml);
  $number_order = NULL;

  if ($risposta->code == 200) {

    // Retrieve response data.
    $risposta_data = $risposta->data;

    $xml = new SimpleXMLElement($risposta_data);

    try {

      $number_order = (string) $xml->Output->GFDOrdCliTesAdd->GFITEMS->{"DATI-TESTATA-DORDINE"}->{'NUMERO-ORDINE'};

      // Log and save order.
      watchdog(
        'commerce_dapi_orders',
        t('Order @number_order send and save into Diapason ERP.'),
        array('@number_order' => $number_order),
        WATCHDOG_INFO
      );
      drupal_set_message(
        t(
          'Order @number_order send and save into Diapason ERP.',
          array('@number_order' => $number_order)
        )
      );
      commerce_order_status_update($commerce_order, 'completed');

  // Insert discount for order.
  commerce_dapi_orders_create_discount($commerce_order, $number_order);

    } catch (Exception $e) {
      $number_order = NULL;
      watchdog(
        'commerce_dapi_orders',
        t('Error in request to retrieve number order from order @order_id send.'),
        array('@order_id' => $commerce_order->order_id),
        WATCHDOG_ERROR
      );
      drupal_set_message(
        t('Error in request to retrieve number order from order @order_id send. Please contact technical support.',
          array(
            '@order_id' => $commerce_order->order_id,
          )
        ), 'warning', TRUE);
    }

  }
  else {
    // Log message error.
    watchdog('commerce_dapi_orders', t('Error in request to create order @order_id for subject @subjectID'), array(
      '@subjectID' => $subject_id,
      '@oder_id' => $commerce_order->order_id,
    ), WATCHDOG_ERROR);
    drupal_set_message(
      t('Error in request to create order @order_id for subject @subjectID. Please contact technical support.',
        array(
          '@subjectID' => $subject_id,
          '@order_id' => $commerce_order->order_id,
        )
      ), 'warning', TRUE);
  }

  drupal_goto('admin/commerce/orders/' . $commerce_order->order_id);
}

/**
 * This callback gets the subject data from Drupal Commerce
 * and build up the json that will be sent to Middleweare Symfony to
 * create a new subject in ERP
 *
 * @param $commerce_order
 */
function commerce_dapi_orders_create_subject($commerce_order) {

  // Load restclient functions.
  module_load_include('inc', 'commerce_dapi_orders', 'include/commerce_dapi_orders.restclient_functions');
  // Load custom functions.
  module_load_include('inc', 'commerce_dapi_orders', 'include/commerce_dapi_orders.custom_functions');

  // Wrapper commerce order.
  $wrapper = entity_metadata_wrapper('commerce_order', $commerce_order);

  $identity = new stdClass;
  $identity->origin = ($wrapper->commerce_customer_billing->commerce_customer_address->country->value() == 'IT') ? 'internal' : 'foreign';
  $identity->zone = (!_commerce_dapi_orders_is_EU($wrapper->commerce_customer_billing->commerce_customer_address->country->value())) ? 'extra-cee' : 'intra-cee';
  $identity->shipment = _is_freeshipping($wrapper);
  $identity->vat_treatment = 'yes-vat';
  $identity->subject_type = ($wrapper->commerce_customer_billing->field_tipologia_fatturazione->value() == 'private') ? 'individual' : 'company';
  $identity->language = ($wrapper->commerce_customer_billing->commerce_customer_address->country->value() == 'IT') ? 'IT' : 'EN';
  $identity->payment = 'paid';

  $account['name'] = $wrapper->commerce_customer_billing->commerce_customer_address->first_name->value();
  $account['surname'] = $wrapper->commerce_customer_billing->commerce_customer_address->last_name->value();
  $account['cf'] = ($wrapper->commerce_customer_billing->field_codice_fiscale->value() == NULL) ? '' : $wrapper->commerce_customer_billing->field_codice_fiscale->value();
  $account['address'] = trim($wrapper->commerce_customer_billing->commerce_customer_address->thoroughfare->value() . " " . $wrapper->commerce_customer_billing->commerce_customer_address->premise->value() . " " . $wrapper->commerce_customer_billing->commerce_customer_address->sub_premise->value());
  $account['city'] = $wrapper->commerce_customer_billing->commerce_customer_address->locality->value();
  $account['province_state'] = _commerce_dapi_orders_state($wrapper->commerce_customer_billing->commerce_customer_address->country->value(), $wrapper->commerce_customer_billing->commerce_customer_address->administrative_area->value());
  $account['zip'] = $wrapper->commerce_customer_billing->commerce_customer_address->postal_code->value();
  $account['country'] = _commerce_dapi_orders_country($wrapper->commerce_customer_billing->commerce_customer_address->country->value());
  $account['email'] = $wrapper->mail->value();
  $account['phone'] = $wrapper->commerce_customer_billing->commerce_customer_address->phone_number->value();
  $account['billing_header'] = ($wrapper->commerce_customer_billing->commerce_customer_address->organisation_name->value() == NULL) ? '' : $wrapper->commerce_customer_billing->commerce_customer_address->organisation_name->value();
  $account['vat_number'] = ($wrapper->commerce_customer_billing->field_vat_number->value() == NULL) ? '' : $wrapper->commerce_customer_billing->field_vat_number->value();

  $identity->account = $account;

  if ($account['billing_header'] == "") {
    $header = $wrapper->commerce_customer_shipping->commerce_customer_address->last_name->value() . " " . $wrapper->commerce_customer_shipping->commerce_customer_address->first_name->value();
    $co = "";
  }
  else {
    $header = $account['billing_header'];
    $co = $wrapper->commerce_customer_shipping->commerce_customer_address->last_name->value() . " " . $wrapper->commerce_customer_shipping->commerce_customer_address->first_name->value();
  }

  $shipping['header'] = $header;
  $shipping['co'] = $co;
  $shipping['address'] = trim($wrapper->commerce_customer_shipping->commerce_customer_address->thoroughfare->value() . " " . $wrapper->commerce_customer_shipping->commerce_customer_address->premise->value() . " " . $wrapper->commerce_customer_shipping->commerce_customer_address->sub_premise->value());
  $shipping['city'] = $wrapper->commerce_customer_shipping->commerce_customer_address->locality->value();
  $shipping['province_state'] = _commerce_dapi_orders_state($wrapper->commerce_customer_shipping->commerce_customer_address->country->value(), $wrapper->commerce_customer_shipping->commerce_customer_address->administrative_area->value());
  $shipping['zip'] = $wrapper->commerce_customer_shipping->commerce_customer_address->postal_code->value();
  $shipping['country'] = _commerce_dapi_orders_country($wrapper->commerce_customer_shipping->commerce_customer_address->country->value());
  $shipping['email'] = $wrapper->mail->value();
  $shipping['phone'] = $wrapper->commerce_customer_shipping->commerce_customer_address->phone_number->value();

  $identity->shipping = $shipping;

  // Call API for insert subject.
  $response = commerce_dapi_orders_insert_subject($identity);

  // Check response
  if ($response->code != '200') {

    // Log message error.
    watchdog('commerce_dapi_orders', t('Error in request to create subject from order @order_id. Data: @data'), array(
      '@order_id' => $commerce_order->order_id,
      '@data' => $response->data,
    ), WATCHDOG_ERROR);
    drupal_set_message(t('Error in request to create subject. Please contact technical support.'), 'warning', TRUE);

  }
  else {
    watchdog('commerce_dapi_orders', t('Insert subject @data'), array(
      '@data' => serialize($identity),
    ), WATCHDOG_INFO);
  }

  drupal_goto('admin/commerce/orders/' . $commerce_order->order_id . '/dapi');
}

/**
 * This callback gets the order data from Drupal Commerce
 * and build up the xml that will be sent to information of discount to ERP
 * if present.
 *
 * @param $commerce_order
 */
function commerce_dapi_orders_create_discount($commerce_order, $diapason_order_id) {

  $order_wrapper = entity_metadata_wrapper('commerce_order', $commerce_order);
  $discount_value = 0;

  // Search and calcolate (if found) a discounts order.
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item) {

    // Type of line-item.
    if ($line_item->type->value() == "commerce_discount") {

      // Components
      $data_component_price = $line_item->commerce_unit_price->value();
      foreach ($data_component_price['data']['components'] as $component) {
        if (isset($component['price']['data']['discount_name'])) {
          $discount_value = $discount_value + abs($component['price']['amount']);
        }
      }
    }
  }

  // If discount is present.
  if ($discount_value > 0) {

    // Format amount.
    $discount_value = commerce_currency_amount_to_decimal($discount_value, $component['price']['currency_code']);
    $discount_value = number_format($discount_value, 2, ',', '');

    // Request.
    $response = commerce_dapi_orders_insert_discount($discount_value, $diapason_order_id, $type = 'amount');

    // Read response.
    if ($response->code == 200) {
      watchdog(
        'commerce_dapi_orders',
        t('Discount Order @number_order send and save into Diapason ERP.'),
        array('@number_order' => $diapason_order_id),
        WATCHDOG_INFO
      );
    }
    else {
      watchdog('commerce_dapi_orders', t('Error in request to create discount order @order_id'), array(
        '@oder_id' => $diapason_order_id,
      ), WATCHDOG_ERROR);
    }
  }

}
